// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	account "movie-api/features/account"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// CheckAccount provides a mock function with given fields: _a0
func (_m *Data) CheckAccount(_a0 account.AccountCore) (account.AccountCore, error) {
	ret := _m.Called(_a0)

	var r0 account.AccountCore
	if rf, ok := ret.Get(0).(func(account.AccountCore) account.AccountCore); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(account.AccountCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(account.AccountCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: accData
func (_m *Data) InsertAccount(accData account.AccountCore) error {
	ret := _m.Called(accData)

	var r0 error
	if rf, ok := ret.Get(0).(func(account.AccountCore) error); ok {
		r0 = rf(accData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAccount provides a mock function with given fields: _a0
func (_m *Data) SelectAccount(_a0 account.AccountCore) ([]account.AccountCore, error) {
	ret := _m.Called(_a0)

	var r0 []account.AccountCore
	if rf, ok := ret.Get(0).(func(account.AccountCore) []account.AccountCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]account.AccountCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(account.AccountCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAccountByID provides a mock function with given fields: id
func (_m *Data) SelectAccountByID(id int) (account.AccountCore, error) {
	ret := _m.Called(id)

	var r0 account.AccountCore
	if rf, ok := ret.Get(0).(func(int) account.AccountCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(account.AccountCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
